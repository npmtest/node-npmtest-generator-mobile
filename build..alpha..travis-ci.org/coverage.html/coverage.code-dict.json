{"/home/travis/build/npmtest/node-npmtest-generator-mobile/test.js":"/* istanbul instrument in package npmtest_generator_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/lib.npmtest_generator_mobile.js":"/* istanbul instrument in package npmtest_generator_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_mobile = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_mobile = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-mobile && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_mobile\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_mobile.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_mobile.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_mobile.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_mobile.__dirname + '/lib.npmtest_generator_mobile.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/index.js":"'use strict';\n\nvar exec = require('child_process').exec;\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\n\nvar prompt = require('./prompt');\nvar download = require('./download');\nvar hosting = require('./hosting');\nvar deps = require('./deps');\n\n\nmodule.exports = yeoman.generators.Base.extend({\n  constructor: function () {\n    yeoman.generators.Base.apply(this, arguments);\n\n    this.option('skip-welcome-message', {\n      desc: 'Skip welcome message',\n      type: Boolean,\n      defaults: false\n    });\n    this.skipWelcome = this.options['skip-welcome-message'];\n\n    this.option('skip-install', {\n      desc: 'Do not install dependencies',\n      type: Boolean,\n      defaults: false\n    });\n    this.skipInstall = this.options['skip-install'];\n\n    this.option('quiet', {\n      desc: 'Be quiet; only errors will be shown',\n      type: Boolean,\n      defaults: false\n    });\n    this.quiet = this.options.quiet;\n    this.verbose = !this.quiet;\n\n    // load package\n    this.pkg = require('../package.json');\n\n    // info/error/warning messages during the generation process\n    this.messages = [];\n\n    // dependencies checks;\n    this.checks = {};\n  },\n\n  prompting: function () {\n    var self = this,\n        done = this.async();\n\n    var promptUser = function (defaults) {\n      self.prompt(prompt.questions(defaults), function (answers) {\n        prompt.populateMissing(answers);\n        if (!answers.confirmed) {\n          promptUser(answers);\n        } else {\n          delete answers.confirmed;\n          self.prompts = answers;\n          done();\n        }\n      });\n    };\n\n    if (this.verbose && !this.skipWelcome) {\n      this.log(yosay('Web Starter Kit generator'));\n    }\n\n    promptUser();\n  },\n\n  configuring: function () {\n    var self = this,\n        done = this.async();\n\n    /*jshint expr:true */\n    this.verbose && this.log.write().info('Getting latest WSK release version ...');\n    /*jshint expr:false */\n\n    download({extract: true, strip: 1}, function (err, downloader, url, ver) {\n      if (err) {\n        self.log.error(err);\n        process.exit(1);\n      }\n\n      if (self.verbose) {\n        /*jshint camelcase:false */\n        self.log.info('Found release %s', ver.tag_name)\n           .info('Fetching %s ...', url)\n           .info(chalk.yellow('This might take a few moments'));\n        /*jshint camelcase:true */\n        downloader.use(function (res) {\n          res.on('data', function () { self.log.write('.'); });\n        });\n      }\n\n      downloader.dest(self.destinationRoot()).run(function (err) {\n        if (err) {\n          self.log.write().error(err).write();\n          process.exit(1);\n        }\n\n        if (self.verbose) {\n          self.log.write().ok('Done').info('Checking dependencies ...');\n        }\n\n        var checks = deps.checkAll(self.prompts);\n        checks.on('done', done);\n\n        checks.on('passed', function (res) {\n          self.checks[res.what] = {data: res.data};\n          /*jshint expr:true */\n          self.verbose && self.log.ok(res.what + ' ' + (res.result || ''));\n          /*jshint expr:false */\n        });\n\n        checks.on('failed', function (res) {\n          self.checks[res.what] = {data: res.data, error: res.error};\n          self.messages.push(res.error.message);\n          self.log.error(res.error.message);\n        });\n      });\n\n    });\n  },\n\n  writing: {\n    gulpfile: function () {\n      /*jshint expr:true */\n      this.verbose && this.log.info('Configuring gulpfile.js');\n      /*jshint expr:false */\n\n      var filepath = path.join(this.destinationRoot(), 'gulpfile.js'),\n          gulpfile = this.readFileAsString(filepath);\n\n      // pagespeed\n      if (this.prompts.siteUrl) {\n        /*jshint quotmark:false */\n        var repl = \"$1url: '\" + this.prompts.siteUrl + \"'\";\n        gulpfile = gulpfile.replace(/(pagespeed(?:.|\\s)+)url:[^,]+/m, repl);\n        /*jshint quotmark:single */\n      }\n\n      // server-config\n      var cfg = hosting.config(this.prompts.hostingChoice);\n      if (cfg) {\n        /*jshint quotmark:false */\n        gulpfile = gulpfile.replace(/['\"].*apache-server-configs.*['\"]/m, \"'app/\" + cfg.filename + \"'\");\n        /*jshint quotmark:single */\n      } else {\n        gulpfile = gulpfile.replace(/^.*apache-server-configs.*$/m, '');\n      }\n\n      // TODO: remove this and the corresponding test on the next WSK release\n      /*jshint quotmark:false */\n      gulpfile = gulpfile.replace(\n        /^gulp\\.task\\('clean', del\\.bind\\(null, \\['\\.tmp', 'dist'\\]\\)\\);$/m,\n        \"gulp.task('clean', del.bind(null, ['.tmp', 'dist/*', '!dist/.git']));\");\n      /*jshint quotmark:single */\n\n      this.writeFileFromString(gulpfile, filepath);\n    },\n\n    // serverconfig: function () {\n    //   if (!hosting.isSupported(this.prompts.hostingChoice))\n    //     return;\n\n    //   this.verbose && this.log.info('Fetching server config');\n\n    //   var done = this.async();\n    //   hosting.fetchConfig(this.prompts.hostingChoice, function (err, cfg, content) {\n    //     if (!err) {\n    //       // TODO: adjust Project ID if it is GAE\n    //       this.dest.write(path.join('app', cfg.filename), content);\n    //     } else {\n    //       this.log.error(err);\n    //     }\n    //     done();\n    //   }.bind(this));\n    // },\n\n    packagejson: function () {\n      /*jshint expr:true */\n      this.verbose && this.log.info('Configuring package.json');\n      /*jshint expr:false */\n\n      var filepath = path.join(this.destinationRoot(), 'package.json'),\n          pkg = JSON.parse(this.readFileAsString(filepath));\n\n      pkg.name = (this.prompts.siteName || 'replace me')\n        .replace(/[^0-9a-z_\\-]/ig, '-')\n        .replace(/-+/g, '-');\n      pkg.version = '0.0.0';\n      pkg.description = this.prompts.siteDescription;\n      pkg.homepage = this.prompts.siteUrl;\n      pkg.main = 'app/index.html';\n      delete pkg.devDependencies['apache-server-configs'];\n\n      this.writeFileFromString(JSON.stringify(pkg, null, 2), filepath);\n    },\n\n    webmanifest: function () {\n      /*jshint expr:true */\n      this.verbose && this.log.info('Configuring manifest.webapp');\n      /*jshint expr:false */\n\n      var filepath = path.join(this.destinationRoot(), 'app', 'manifest.webapp'),\n          manifest = JSON.parse(this.readFileAsString(filepath));\n\n      manifest.name = this.prompts.siteName;\n      manifest.description = this.prompts.siteDescription;\n      manifest.locales = manifest.locales || {};\n      manifest.locales.en = manifest.locales.en || {};\n      manifest.locales.en.name = this.prompts.siteName;\n      manifest.locales.en.description = this.prompts.siteDescription;\n\n      this.writeFileFromString(JSON.stringify(manifest, null, 2), filepath);\n    },\n\n    layout: function () {\n      /*jshint expr:true */\n      this.verbose && this.log.info('Configuring layout and contents');\n      /*jshint expr:false */\n\n      var basic = path.join(this.destinationRoot(), 'app', 'basic.html'),\n          index = path.join(this.destinationRoot(), 'app', 'index.html'),\n          content;\n\n      // Layout\n      if (this.prompts.layoutChoice === 'default') {\n        content = this.read(index);\n      } else if (this.prompts.layoutChoice === 'ie8') {\n        content = this.read(basic);\n      }\n      this.dest.delete(basic);\n\n      // Google Analytics\n      if (this.prompts.gaTrackId) {\n        content = content.replace(/UA-XXXXX-X/g, this.prompts.gaTrackId);\n      }\n\n      // Site name and description\n      if (this.prompts.siteName) {\n        var repl1 = '$1' + this.prompts.siteName + '$2';\n        content = content.replace(/(<title>).*(<\\/title>)/, repl1);\n      }\n      if (this.prompts.siteDescription) {\n        var repl2 = '$1' + this.prompts.siteDescription + '$2';\n        content = content.replace(/(<meta\\s+name=[\"']description[\"']\\s+content=[\"']).*([\"'])/, repl2);\n      }\n\n      this.writeFileFromString(content, index);\n    },\n\n    // --------------------- hosting / deployment tasks ---------------------\n\n    gcloud: function () {\n      if (this.prompts.hostingChoice !== 'gae') {\n        return;\n      }\n\n      this.dest.mkdir('.gcloud');\n      this.template('gcloud-properties', path.join('.gcloud', 'properties'));\n      this.template('deploy_gae.js', path.join('tasks', 'deploy.js'));\n\n      var done = this.async();\n      hosting.fetchConfig('gae', function (err, cfg, content) {\n        if (!err) {\n          content = content.replace(/^(application:\\s+).*$/m, '$1' + this.prompts.gcloudProjectId);\n          this.dest.write(path.join('app', cfg.filename), content);\n        } else {\n          this.log.error(err);\n        }\n        done();\n      }.bind(this));\n    },\n\n    github: function () {\n      if (this.prompts.hostingChoice !== 'github') {\n        return;\n      }\n\n      this.dest.mkdir('dist');\n      this.template('deploy_github.js', path.join('tasks', 'deploy.js'));\n      if (this.prompts.siteHost && !prompt.isGitHub(this.prompts.siteHost)) {\n        this.dest.write(path.join('app', 'CNAME'), this.prompts.siteHost);\n      }\n\n      if (this.checks.git.error) {\n        return;\n      }\n\n      var log = !this.quiet && this.log,\n          done = this.async();\n\n      var cmd = [\n        'git init .',\n        'git checkout -b ' + this.prompts.githubBranch,\n        'git commit --allow-empty -m \"Initial empty commit\"',\n        'git remote add origin git@github.com:' + this.prompts.githubTarget\n      ];\n      exec(cmd.join(' && '), {cwd: path.join('dist')}, function (err, stdout) {\n        /*jshint expr:true */\n        log && log.write().info(stdout);\n        /*jshint expr:false */\n        done();\n      });\n    }\n\n  },\n\n  install: {\n    npminstall: function () {\n      if (!this.skipInstall) {\n        /*jshint expr:true */\n        this.verbose && this.log.write()\n          .info('Running ' + chalk.yellow('npm install') + ' ' +\n                'to install the required dependencies. ' +\n                'If this fails, try running the command yourself.')\n          .info(chalk.yellow('This might take a few moments'))\n          .write();\n        /*jshint expr:false */\n        this.npmInstall();\n      }\n    },\n\n    git: function () {\n      if (!this.checks.git || this.checks.git.error) {\n        return;\n      }\n\n      var self = this,\n          done = this.async(),\n          cmd = [\n            'git init',\n            'git add .',\n            'git commit -m \"Initial commit\"'\n          ];\n\n      exec(cmd.join(' && '), function (err, stdout) {\n        /*jshint expr:true */\n        err && self.log.error(err);\n        self.verbose && self.log.write(stdout);\n        /*jshint expr:false */\n        done();\n      });\n    }\n  },\n\n  end: function () {\n    if (this.messages.length === 0) {\n      /*jshint expr:true */\n      this.verbose && this.log.write().ok('You are all set now. Happy coding!');\n      /*jshint expr:false */\n      return;\n    }\n\n    this.log.write().error('There were some errors during the process:').write();\n\n    for (var i = 0, m; (m = this.messages[i]); i++) {\n      this.log.write((i + 1) + ' ' + m);\n    }\n  }\n});\n\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/prompt.js":"'use strict';\n\nvar path = require('path');\nvar iniparser = require('iniparser');\n\n// [match, host[:port], /path]\nvar RE_URL = /^(?:https?:\\/\\/)?([a-z0-9\\-_]+(?:\\.[a-z0-9\\-_]+)*(?::\\d+)?)(\\/.*)?$/i;\n// \"owner/repo\" or \"owner\"\nvar RE_GITHUB_TARGET = /^([a-z0-9][a-z0-9\\-]*)(?:\\/([a-z0-9_\\-\\.]+))?$/i;\n\n\nfunction extractDomain(url) {\n  var match = (url || '').match(RE_URL);\n  return match && match[1];\n}\n\nfunction isGitHub(url) {\n  return /.+\\.github\\.io$/i.test(extractDomain(url));\n}\n\n// populateMissing takes user answers and infers missing values\n// from other answers.\nfunction populateMissing(answers) {\n  if (!answers.siteUrl && answers.githubTarget) {\n    var t1 = answers.githubTarget.match(RE_GITHUB_TARGET);\n    if (isGitHub(t1[2])) {\n      answers.siteUrl = 'https://' + t1[2];\n    } else {\n      answers.siteUrl = 'https://' + t1[1] + '.github.io/' + t1[2];\n    }\n  }\n\n  if (isGitHub(answers.siteUrl)) {\n    var match = answers.siteUrl.match(RE_URL);\n    answers.isGitHubProject = match[2] && match[2].length > 1;\n\n    if (!answers.githubTarget) {\n      var t2 = match[1].split('.')[0] + '/' + (answers.isGitHubProject ? match[2] : match[1]);\n      answers.githubTarget = t2.replace(/\\/\\//g, '/');\n    }\n  }\n\n  if (answers.githubTarget) {\n    var t3 = answers.githubTarget.match(RE_GITHUB_TARGET);\n    answers.githubBranch = t3[2] === (t3[1] + '.github.io') ? 'master' : 'gh-pages';\n  }\n\n  if (answers.siteUrl) {\n    answers.siteHost = extractDomain(answers.siteUrl);\n  }\n}\n\nfunction questions(defaults) {\n  defaults = defaults || {};\n  return [\n    {\n      message: 'Site name',\n      name: 'siteName',\n      default: defaults.siteName || process.cwd().split(path.sep).pop()\n    },\n    {\n      message: 'Site description',\n      name: 'siteDescription',\n      default: defaults.siteDescription\n    },\n    {\n      message: ('Site URL (e.g. www.example.org, https://owner.github.io),\\n  '+\n                'hit enter to skip.\\n '),\n      name: 'siteUrl',\n      default: defaults.siteUrl,\n      filter: function (url) {\n        if (url && url.substring(0, 4) !== 'http') {\n          url = 'http://' + url;\n        }\n        return url;\n      },\n      validate: function (url) {\n        if (!url || RE_URL.test(url)) {\n          return true;\n        }\n        /*jshint quotmark:false */\n        return \"That doesn't look like a valid URL\";\n        /*jshint quotmark:single */\n      }\n    },\n    {\n      message: 'Do you want a default layout?',\n      name: 'layoutChoice',\n      type: 'list',\n      choices: [\n        {value: 'default', name: 'Yes, supports IE10+'},\n        {value: 'ie8', name: 'No, barebones HTML file'}\n      ],\n      default: defaults.layoutChoice || 'default'\n    },\n    {\n      message: ('Google Analytics tracking ID, or hit enter to skip.\\n  '+\n                '(get your tracking ID at https://www.google.com/analytics/web/)\\n '),\n      name: 'gaTrackId',\n      default: defaults.gaTrackId\n    },\n    // {\n    //   message: 'Use build system? (Gulp, Sass, etc.)',\n    //   name: 'shouldUseBuild',\n    //   type: 'confirm',\n    //   default: typeof defaults.shouldUseBuild == 'boolean' ? defaults.shouldUseBuild : true\n    // },\n\n    // -------------- hosting providers ------------------\n\n    {\n      message: 'Where would you like to host the site?',\n      name: 'hostingCat',\n      type: 'list',\n      choices: [\n        {value: 'paas', name: 'PaaS (GAE, Heroku)'},\n        {value: 'static', name: 'Static (GitHub, GCS, S3)'},\n        {value: 'server', name: 'Server (Apache, Nginx, etc.)'},\n        /*jshint quotmark:false */\n        {value: 'none', name: \"Nowhere, don't worry about it\"}\n        /*jshint quotmark:single */\n      ],\n      default: function (answers) {\n        return defaults.hostingCat ||\n        (isGitHub(answers.siteUrl) ? 'static' : 'none');\n      }\n    },\n    {\n      message: 'Which PaaS is it?',\n      name: 'hostingChoice',\n      type: 'list',\n      choices: [\n        {value: 'gae', name: 'Google App Engine (GAE)'},\n        {value: 'heroku', name: 'Heroku'},\n        {value: 'none', name: 'Other (not supported)'}\n      ],\n      default: defaults.hostingChoice || 'none',\n      when: function (answers) {\n        return answers.hostingCat === 'paas';\n      }\n    },\n    {\n      message: 'Which static hosting is it?',\n      name: 'hostingChoice',\n      type: 'list',\n      choices: [\n        {value: 'github', name: 'GitHub'},\n        {value: 'gcs', name: 'Google Cloud Storage (GCS)'},\n        {value: 's3', name: 'Amazon AWS S3'},\n        {value: 'none', name: 'Other (not supported)'}\n      ],\n      default: function (answers) {\n        return defaults.hostingChoice ||\n               (isGitHub(answers.siteUrl) ? 'github' : 'none');\n      },\n      when: function (answers) {\n        return answers.hostingCat === 'static';\n      }\n    },\n    {\n      message: 'Which server is it?',\n      name: 'hostingChoice',\n      type: 'list',\n      choices: [\n        {value: 'apache', name: 'Apache'},\n        {value: 'nginx', name: 'Nginx'},\n        {value: 'nodejs', name: 'Node.js'},\n        {value: 'other', name: 'Other (not supported'}\n      ],\n      default: defaults.hostingChoice || 'other',\n      when: function (answers) {\n        return answers.hostingCat === 'server';\n      }\n    },\n\n    // -------------- GAE (PaaS hosting) ------------------\n\n    {\n      message: ('What Project ID shall we use?\\n  '+\n                '(you can see all your projects on https://cloud.google.com/console)\\n '),\n      name: 'gcloudProjectId',\n      default: defaults.gcloudProjectId,\n      validate: function (v) {\n        return v ? true : 'need a Project ID';\n      },\n      when: function (answers) {\n        return answers.hostingChoice === 'gae';\n      }\n    },\n\n    // -------------- Heroku (PaaS hosting) ------------------\n\n    {\n      /*jshint quotmark:false */\n      message: (\"What is your Heroku app name?\\n  \"+\n                \"(just hitting enter is OK, we'll create one for you)\\n \"),\n      /*jshint quotmark:single */\n      name: 'herokuApp',\n      default: defaults.herokuApp,\n      when: function (answers) {\n        return answers.hostingChoice === 'heroku';\n      }\n    },\n\n    // -------------- GCS / S3 (static hosting) ------------------\n\n    {\n      message: 'Site domain (e.g. www.example.org) or a bucket name',\n      name: 'siteDomain',\n      default: defaults.siteDomain,\n      when: function (answers) {\n        return ['gcs', 's3'].indexOf(answers.hostingChoice) >= 0 &&\n               !answers.siteUrl;\n      }\n    },\n\n    // -------------- GitHub (static hosting) ------------------\n\n    {\n      message: 'GitHub username or owner/project',\n      name: 'githubTarget',\n      default: function (answers) {\n        if (defaults.githubTarget) {\n          return defaults.githubTarget;\n        }\n\n        if (isGitHub(answers.siteUrl)) {\n          var match = answers.siteUrl.match(RE_URL),\n              name = match[1].split('.')[0],\n              p = match[2] && match[2].length > 1 ? match[2] : '/' + name + '.github.io';\n          return name + p;\n        }\n\n        var user;\n        try {\n          var gitcfg = iniparser.parseSync(path.join(process.env.HOME, '.gitconfig'));\n          user = (gitcfg.github || {}).user;\n        } catch (err) {}\n        user = user || process.env.USER || process.env.USERNAME;\n\n        var repo = extractDomain(answers.siteUrl) || (user + '.github.io');\n        return user && repo ? [user, repo].join('/') : '';\n      },\n      validate: function (v) {\n        if (RE_GITHUB_TARGET.test(v)) {\n          return true;\n        }\n        /*jshint quotmark:false */\n        return \"It's either 'owner' or 'owner/repo'\";\n        /*jshint quotmark:single */\n      },\n      filter: function (v) {\n        if (v && v.indexOf('/') === -1) {\n          v += '/' + v + '.github.io';\n        }\n        return (v || '').replace(/[\"']/g, '');\n      },\n      when: function (answers) {\n        return answers.hostingChoice === 'github';\n      }\n    },\n\n    // -------------- deployment (server only) ------------------\n\n    {\n      message: 'What is your deployment strategy?',\n      name: 'deployChoice',\n      type: 'list',\n      choices: [\n        {value: 'sftp', name: 'Secure FTP (FTP via SSH)'},\n        {value: 'rsync', name: 'rsync'},\n        {value: 'none', name: 'None of the above'}\n      ],\n      default: defaults.deployChoice || 'none',\n      when: function (answers) {\n        return answers.hostingCat === 'server';\n      }\n    },\n    {\n      message: 'Deployment URL (e.g. user@server:[path])',\n      name: 'deployDest',\n      default: function (answers) {\n        if (defaults.deployDest) {\n          return defaults.deployDest;\n        }\n        var user = process.env.USER || process.env.USERNAME;\n        var host = extractDomain(answers.siteUrl);\n        var dest = '';\n        if (user && host) {\n          dest = user + '@' + host + ':' + (answers.siteName || '');\n        }\n        return dest;\n      },\n      when: function (answers) {\n        return answers.deployChoice && answers.deployChoice !== 'none';\n      }\n    },\n    {\n      message: 'Looks good?',\n      name: 'confirmed',\n      type: 'confirm',\n      default: true\n    }\n  ];\n}\n\n\nmodule.exports = {\n  questions: questions,\n  populateMissing: populateMissing,\n  extractDomain: extractDomain,\n  isGitHub: isGitHub\n};\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/download.js":"'use strict';\n\nvar request = require('request');\nvar Download = require('download');\n\nvar WSK_RELEASES_URL = 'https://api.github.com/repos/google/web-starter-kit/releases';\nvar WSK_ZIP_URL = 'https://github.com/google/web-starter-kit/archive/';\n\n\nfunction getLatestRelease(cb) {\n  var opts = {\n    url: WSK_RELEASES_URL,\n    json: true,\n    headers: {\n      'User-Agent': 'generator-mobile',\n      'Accept': 'application/vnd.github.v3+json'\n    }\n  };\n  request(opts, function (err, res, body) {\n    if (err || res.statusCode !== 200) {\n      cb(err || new Error(body || 'web-starter-kit/releases replied with ' + res.statusCode));\n      return;\n    }\n    /*jshint camelcase:false */\n    var release = {tag_name: ''};\n    for (var i = 0, r; (r = body[i]); i++) {\n      if (release.tag_name < r.tag_name) {\n        release = r;\n      }\n    }\n    if (!release.tag_name) {\n      err = new Error('could not fetch WSK release version');\n    }\n    /*jshint camelcase:true */\n    cb(err, release);\n  });\n}\n\nfunction createDownloader(opts, cb) {\n  getLatestRelease(function (err, ver) {\n    if (err) {\n      cb(err);\n      return;\n    }\n    /*jshint camelcase:false */\n    var url = WSK_ZIP_URL + ver.tag_name + '.zip';\n    /*jshint camelcase:true */\n    cb(null, new Download(opts).get(url), url, ver);\n  });\n}\n\n\nmodule.exports = createDownloader;\nmodule.exports.WSK_RELEASES_URL = WSK_RELEASES_URL;\nmodule.exports.WSK_ZIP_URL = WSK_ZIP_URL;\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/hosting.js":"'use strict';\n\nvar request = require('request');\n\n\n// TODO: support other providers\nvar SERVER_CONFIG = {\n  gae: {\n    filename: 'app.yaml',\n    url: 'https://raw.githubusercontent.com/h5bp/server-configs-gae/master/app.yaml'\n  },\n  apache: {\n    filename: '.htaccess',\n    url: 'https://raw.githubusercontent.com/h5bp/server-configs-apache/master/dist/.htaccess'\n  }\n};\n\n\nfunction config(provider) {\n  return SERVER_CONFIG[provider];\n}\n\nfunction isSupported(provider) {\n  return !!config(provider);\n}\n\nfunction fetchConfig(provider, callback) {\n  var cfg = config(provider);\n  if (!cfg) {\n    callback(new Error('unknown provider: ' + provider));\n    return;\n  }\n  request(cfg.url, function (err, res, body) {\n    if (!err && res.statusCode !== 200) {\n      err = new Error('config fetch error ' + res.statusCode);\n    }\n    callback(err, cfg, body);\n  });\n}\n\n//function deployTaskFilename(provider, tool) {\n//}\n\nmodule.exports = {\n  config: config,\n  isSupported: isSupported,\n  fetchConfig: fetchConfig,\n  //deployTaskFilename: deployTaskFilename\n};\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/deps.js":"/**\n * WSK dependencies check module\n */\n'use strict';\n\nvar exec = require('child_process').exec;\nvar events = require('events');\nvar iniparser = require('iniparser');\n\nvar PASSED = 'passed',\n    FAILED = 'failed';\n\n\nfunction checkGit(callback) {\n  exec('git config --list', function (err, stdout) {\n    if (err) {\n      err = new Error('git: not installed (' + err.message + ')');\n      callback(FAILED, {what: 'git', error: err});\n      return;\n    }\n\n    var data = iniparser.parseString(stdout);\n\n    if (data['user.name'] && data['user.email']) {\n      callback(PASSED, {what: 'git', data: data});\n    } else {\n      var errNoConf = new Error('git: not configured');\n      callback(FAILED, {what: 'git', data: data, error: errNoConf});\n    }\n  });\n}\n\nfunction checkGcloud(callback) {\n  exec('gcloud config list --format json', function (err, stdout) {\n    if (err) {\n      err = new Error('gcloud: not installed (' + err.message + ')');\n      callback(FAILED, {what: 'gcloud', error: err});\n      return;\n    }\n\n    var cfg = {};\n    try {\n      cfg = JSON.parse(stdout);\n    } catch (err) {}\n\n    if (cfg.core && cfg.core.account) {\n      callback(PASSED, {what: 'gcloud', data: cfg});\n    } else {\n      var errNoConf = new Error('gcloud: not configured');\n      callback(FAILED, {what: 'gcloud', data: cfg, error: errNoConf});\n    }\n  });\n}\n\nfunction filterChecksFor(reqs) {\n  var checks = [];\n\n  if (['github', 'heroku'].indexOf(reqs.hostingChoice) >= 0) {\n    checks.push(checkGit);\n  }\n\n  if (reqs.hostingChoice === 'gae') {\n    checks.push(checkGcloud);\n  }\n\n  return checks;\n}\n\nfunction checkAll(reqs) {\n  var e = new events.EventEmitter();\n\n  process.nextTick(function () {\n    var checks = filterChecksFor(reqs);\n\n    if (checks.length === 0) {\n      e.emit('done');\n      return;\n    }\n\n    var counter = 0, maybeDone = function (result, payload) {\n      counter += 1;\n      e.emit(result, payload);\n      if (counter === checks.length) {\n        e.emit('done');\n      }\n    };\n\n    for (var i = 0; i < checks.length; i++) {\n      checks[i](maybeDone);\n    }\n  });\n\n  return e;\n}\n\n\nmodule.exports = {\n  PASSED: PASSED,\n  FAILED: FAILED,\n  checkAll: checkAll,\n  checkGit: checkGit,\n  checkGcloud: checkGcloud\n};\n\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/templates/deploy_gae.js":"'use strict';\n\nvar spawn = require('child_process').spawn;\nvar gulp = require('gulp');\n\n// Deployment to Google App Engine (GAE) using gcloud tool.\ngulp.task('deploy', ['default'], function (done) {\n  var args = ['preview', 'app', 'deploy', 'dist'];\n  if (process.argv.length > 3) {\n    args.push.apply(args, process.argv.slice(3));\n  }\n  console.log('gcloud', args.join(' '));\n  spawn('gcloud', args, { stdio: 'inherit' }).on('close', function (code) {\n    done();\n    if (code !== 0) {\n      process.exit(code);\n    }\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-generator-mobile/node_modules/generator-mobile/app/templates/deploy_github.js":"'use strict';\n\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\n\nvar gulp = require('gulp');\nvar runSequence = require('run-sequence');\n\n\n// Deployment to GitHub using git.\ngulp.task('deploy', ['default'], function (done) {\n  runSequence('deploy:commit', 'deploy:push', done);\n});\n\n// Commit changes to production build locally.\ngulp.task('deploy:commit', function (done) {\n  var msg, im = process.argv.indexOf('-m');\n  if (im >= 0) {\n    msg = process.argv.slice(im, im + 2)[1];\n  }\n  msg = msg || 'Production build';\n  /*jshint quotmark:false */\n  var cmd = [\"git add .\", \"git commit -m '\" + msg + \"'\", \"git status\"];\n  /*jshint quotmark:true */\n  exec(cmd.join(' && '), {cwd: path.join(process.cwd(), 'dist')}, function (err, stdout, stderr) {\n    if (!/working directory clean/m.test(stdout)) {\n      console.log('--- ERROR log ---\\n' + stderr);\n      console.log('--- STDOUT log ---\\n' + stdout);\n      throw err || new Error('deploy:commit');\n    }\n    done();\n  });\n});\n\n// Push changes to remote (actual deployment).\ngulp.task('deploy:push', function (done) {\n  var cwd = path.join(process.cwd(), 'dist');\n  var args = ['push', '-u', 'origin', '<%= prompts.githubBranch %>'];\n  spawn('git', args, {cwd: cwd, stdio: 'inherit'}).on('close', function (code) {\n    if (code !== 0) {\n      throw new Error('deploy:push exit code is ' + code);\n    }\n    done();\n  });\n});\n"}